// automatically generated by the FlatBuffers compiler, do not modify

import { Attacker, AttackerT } from './attacker';
import { BookReader, BookReaderT } from './book-reader';
import { Rapunzel, RapunzelT } from './rapunzel';


export enum Character{
  NONE = 0,
  MuLan = 1,
  Rapunzel = 2,
  Belle = 3,
  BookFan = 4,
  Other = 5,
  Unused = 6
}

export function unionToCharacter(
  type: Character,
  accessor: (Type: { new (): Attacker|BookReader|Rapunzel|string }) => Attacker|BookReader|Rapunzel|string|null
): Attacker|BookReader|Rapunzel|string|null {
  switch(type) {
    case Character.NONE: return null; 
    case Character.MuLan: return accessor(Attacker);
    case Character.Rapunzel: return accessor(Rapunzel);
    case Character.Belle: return accessor(BookReader);
    case Character.BookFan: return accessor(BookReader);
    case Character.Other: return accessor('') as string;
    case Character.Unused: return accessor('') as string;
    default: return null;
  }
}

export function unionListToCharacter(
  type: Character, 
  accessor: (index: number, Type: { new (): Attacker|BookReader|Rapunzel|string }) => Attacker|BookReader|Rapunzel|string|null, 
  index: number
): Attacker|BookReader|Rapunzel|string|null {
  switch(type) {
    case Character.NONE: return null; 
    case Character.MuLan: return accessor(index, Attacker);
    case Character.Rapunzel: return accessor(index, Rapunzel);
    case Character.Belle: return accessor(index, BookReader);
    case Character.BookFan: return accessor(index, BookReader);
    case Character.Other: return accessor(index, '') as string;
    case Character.Unused: return accessor(index, '') as string;
    default: return null;
  }
}

