// automatically generated by the FlatBuffers compiler, do not modify

import { Monster as MyGameExample2Monster, MonsterT as MyGameExample2MonsterT } from '../../my-game/example2/monster';
import { Monster, MonsterT } from '../../my-game/example/monster';
import { TestSimpleTableWithEnum, TestSimpleTableWithEnumT } from '../../my-game/example/test-simple-table-with-enum';


export enum AnyUniqueAliases{
  NONE = 0,
  M = 1,
  TS = 2,
  M2 = 3
}

export function unionToAnyUniqueAliases(
  type: AnyUniqueAliases,
  accessor: (Type: { new (): Monster|MyGameExample2Monster|TestSimpleTableWithEnum }) => Monster|MyGameExample2Monster|TestSimpleTableWithEnum|null
): Monster|MyGameExample2Monster|TestSimpleTableWithEnum|null {
  switch(type) {
    case AnyUniqueAliases.NONE: return null; 
    case AnyUniqueAliases.M: return accessor(Monster);
    case AnyUniqueAliases.TS: return accessor(TestSimpleTableWithEnum);
    case AnyUniqueAliases.M2: return accessor(MyGameExample2Monster);
    default: return null;
  }
}

export function unionListToAnyUniqueAliases(
  type: AnyUniqueAliases, 
  accessor: (index: number, Type: { new (): Monster|MyGameExample2Monster|TestSimpleTableWithEnum }) => Monster|MyGameExample2Monster|TestSimpleTableWithEnum|null, 
  index: number
): Monster|MyGameExample2Monster|TestSimpleTableWithEnum|null {
  switch(type) {
    case AnyUniqueAliases.NONE: return null; 
    case AnyUniqueAliases.M: return accessor(index, Monster);
    case AnyUniqueAliases.TS: return accessor(index, TestSimpleTableWithEnum);
    case AnyUniqueAliases.M2: return accessor(index, MyGameExample2Monster);
    default: return null;
  }
}

